/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_QAPI_COMMANDS_CXL_TRACE_EVENTS_GENERATED_TRACERS_H
#define TRACE_QAPI_COMMANDS_CXL_TRACE_EVENTS_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_QMP_ENTER_CXL_INJECT_GENERAL_MEDIA_EVENT_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_CXL_INJECT_GENERAL_MEDIA_EVENT_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_CXL_INJECT_DRAM_EVENT_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_CXL_INJECT_DRAM_EVENT_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_CXL_INJECT_MEMORY_MODULE_EVENT_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_CXL_INJECT_MEMORY_MODULE_EVENT_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_CXL_INJECT_POISON_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_CXL_INJECT_POISON_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_CXL_INJECT_UNCORRECTABLE_ERRORS_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_CXL_INJECT_UNCORRECTABLE_ERRORS_EVENT;
extern TraceEvent _TRACE_QMP_ENTER_CXL_INJECT_CORRECTABLE_ERROR_EVENT;
extern TraceEvent _TRACE_QMP_EXIT_CXL_INJECT_CORRECTABLE_ERROR_EVENT;
extern uint16_t _TRACE_QMP_ENTER_CXL_INJECT_GENERAL_MEDIA_EVENT_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_CXL_INJECT_GENERAL_MEDIA_EVENT_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_CXL_INJECT_DRAM_EVENT_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_CXL_INJECT_DRAM_EVENT_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_CXL_INJECT_MEMORY_MODULE_EVENT_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_CXL_INJECT_MEMORY_MODULE_EVENT_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_CXL_INJECT_POISON_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_CXL_INJECT_POISON_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_CXL_INJECT_UNCORRECTABLE_ERRORS_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_CXL_INJECT_UNCORRECTABLE_ERRORS_DSTATE;
extern uint16_t _TRACE_QMP_ENTER_CXL_INJECT_CORRECTABLE_ERROR_DSTATE;
extern uint16_t _TRACE_QMP_EXIT_CXL_INJECT_CORRECTABLE_ERROR_DSTATE;
#define TRACE_QMP_ENTER_CXL_INJECT_GENERAL_MEDIA_EVENT_ENABLED 1
#define TRACE_QMP_EXIT_CXL_INJECT_GENERAL_MEDIA_EVENT_ENABLED 1
#define TRACE_QMP_ENTER_CXL_INJECT_DRAM_EVENT_ENABLED 1
#define TRACE_QMP_EXIT_CXL_INJECT_DRAM_EVENT_ENABLED 1
#define TRACE_QMP_ENTER_CXL_INJECT_MEMORY_MODULE_EVENT_ENABLED 1
#define TRACE_QMP_EXIT_CXL_INJECT_MEMORY_MODULE_EVENT_ENABLED 1
#define TRACE_QMP_ENTER_CXL_INJECT_POISON_ENABLED 1
#define TRACE_QMP_EXIT_CXL_INJECT_POISON_ENABLED 1
#define TRACE_QMP_ENTER_CXL_INJECT_UNCORRECTABLE_ERRORS_ENABLED 1
#define TRACE_QMP_EXIT_CXL_INJECT_UNCORRECTABLE_ERRORS_ENABLED 1
#define TRACE_QMP_ENTER_CXL_INJECT_CORRECTABLE_ERROR_ENABLED 1
#define TRACE_QMP_EXIT_CXL_INJECT_CORRECTABLE_ERROR_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_QMP_ENTER_CXL_INJECT_GENERAL_MEDIA_EVENT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_CXL_INJECT_GENERAL_MEDIA_EVENT) || \
    false)

static inline void _nocheck__trace_qmp_enter_cxl_inject_general_media_event(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_CXL_INJECT_GENERAL_MEDIA_EVENT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 3 "qapi/qapi-commands-cxl.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_cxl_inject_general_media_event " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 64 "trace/trace-qapi_commands_cxl_trace_events.h"
        } else {
#line 3 "qapi/qapi-commands-cxl.trace-events"
            qemu_log("qmp_enter_cxl_inject_general_media_event " "%s" "\n", json);
#line 68 "trace/trace-qapi_commands_cxl_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_cxl_inject_general_media_event(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_cxl_inject_general_media_event(json);
    }
}

#define TRACE_QMP_EXIT_CXL_INJECT_GENERAL_MEDIA_EVENT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_CXL_INJECT_GENERAL_MEDIA_EVENT) || \
    false)

static inline void _nocheck__trace_qmp_exit_cxl_inject_general_media_event(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_CXL_INJECT_GENERAL_MEDIA_EVENT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "qapi/qapi-commands-cxl.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_cxl_inject_general_media_event " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 95 "trace/trace-qapi_commands_cxl_trace_events.h"
        } else {
#line 4 "qapi/qapi-commands-cxl.trace-events"
            qemu_log("qmp_exit_cxl_inject_general_media_event " "%s %d" "\n", result, succeeded);
#line 99 "trace/trace-qapi_commands_cxl_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_cxl_inject_general_media_event(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_cxl_inject_general_media_event(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_CXL_INJECT_DRAM_EVENT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_CXL_INJECT_DRAM_EVENT) || \
    false)

static inline void _nocheck__trace_qmp_enter_cxl_inject_dram_event(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_CXL_INJECT_DRAM_EVENT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "qapi/qapi-commands-cxl.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_cxl_inject_dram_event " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 126 "trace/trace-qapi_commands_cxl_trace_events.h"
        } else {
#line 5 "qapi/qapi-commands-cxl.trace-events"
            qemu_log("qmp_enter_cxl_inject_dram_event " "%s" "\n", json);
#line 130 "trace/trace-qapi_commands_cxl_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_cxl_inject_dram_event(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_cxl_inject_dram_event(json);
    }
}

#define TRACE_QMP_EXIT_CXL_INJECT_DRAM_EVENT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_CXL_INJECT_DRAM_EVENT) || \
    false)

static inline void _nocheck__trace_qmp_exit_cxl_inject_dram_event(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_CXL_INJECT_DRAM_EVENT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "qapi/qapi-commands-cxl.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_cxl_inject_dram_event " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 157 "trace/trace-qapi_commands_cxl_trace_events.h"
        } else {
#line 6 "qapi/qapi-commands-cxl.trace-events"
            qemu_log("qmp_exit_cxl_inject_dram_event " "%s %d" "\n", result, succeeded);
#line 161 "trace/trace-qapi_commands_cxl_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_cxl_inject_dram_event(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_cxl_inject_dram_event(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_CXL_INJECT_MEMORY_MODULE_EVENT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_CXL_INJECT_MEMORY_MODULE_EVENT) || \
    false)

static inline void _nocheck__trace_qmp_enter_cxl_inject_memory_module_event(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_CXL_INJECT_MEMORY_MODULE_EVENT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "qapi/qapi-commands-cxl.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_cxl_inject_memory_module_event " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 188 "trace/trace-qapi_commands_cxl_trace_events.h"
        } else {
#line 7 "qapi/qapi-commands-cxl.trace-events"
            qemu_log("qmp_enter_cxl_inject_memory_module_event " "%s" "\n", json);
#line 192 "trace/trace-qapi_commands_cxl_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_cxl_inject_memory_module_event(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_cxl_inject_memory_module_event(json);
    }
}

#define TRACE_QMP_EXIT_CXL_INJECT_MEMORY_MODULE_EVENT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_CXL_INJECT_MEMORY_MODULE_EVENT) || \
    false)

static inline void _nocheck__trace_qmp_exit_cxl_inject_memory_module_event(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_CXL_INJECT_MEMORY_MODULE_EVENT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 8 "qapi/qapi-commands-cxl.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_cxl_inject_memory_module_event " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 219 "trace/trace-qapi_commands_cxl_trace_events.h"
        } else {
#line 8 "qapi/qapi-commands-cxl.trace-events"
            qemu_log("qmp_exit_cxl_inject_memory_module_event " "%s %d" "\n", result, succeeded);
#line 223 "trace/trace-qapi_commands_cxl_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_cxl_inject_memory_module_event(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_cxl_inject_memory_module_event(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_CXL_INJECT_POISON_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_CXL_INJECT_POISON) || \
    false)

static inline void _nocheck__trace_qmp_enter_cxl_inject_poison(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_CXL_INJECT_POISON) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "qapi/qapi-commands-cxl.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_cxl_inject_poison " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 250 "trace/trace-qapi_commands_cxl_trace_events.h"
        } else {
#line 9 "qapi/qapi-commands-cxl.trace-events"
            qemu_log("qmp_enter_cxl_inject_poison " "%s" "\n", json);
#line 254 "trace/trace-qapi_commands_cxl_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_cxl_inject_poison(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_cxl_inject_poison(json);
    }
}

#define TRACE_QMP_EXIT_CXL_INJECT_POISON_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_CXL_INJECT_POISON) || \
    false)

static inline void _nocheck__trace_qmp_exit_cxl_inject_poison(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_CXL_INJECT_POISON) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "qapi/qapi-commands-cxl.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_cxl_inject_poison " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 281 "trace/trace-qapi_commands_cxl_trace_events.h"
        } else {
#line 10 "qapi/qapi-commands-cxl.trace-events"
            qemu_log("qmp_exit_cxl_inject_poison " "%s %d" "\n", result, succeeded);
#line 285 "trace/trace-qapi_commands_cxl_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_cxl_inject_poison(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_cxl_inject_poison(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_CXL_INJECT_UNCORRECTABLE_ERRORS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_CXL_INJECT_UNCORRECTABLE_ERRORS) || \
    false)

static inline void _nocheck__trace_qmp_enter_cxl_inject_uncorrectable_errors(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_CXL_INJECT_UNCORRECTABLE_ERRORS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 11 "qapi/qapi-commands-cxl.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_cxl_inject_uncorrectable_errors " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 312 "trace/trace-qapi_commands_cxl_trace_events.h"
        } else {
#line 11 "qapi/qapi-commands-cxl.trace-events"
            qemu_log("qmp_enter_cxl_inject_uncorrectable_errors " "%s" "\n", json);
#line 316 "trace/trace-qapi_commands_cxl_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_cxl_inject_uncorrectable_errors(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_cxl_inject_uncorrectable_errors(json);
    }
}

#define TRACE_QMP_EXIT_CXL_INJECT_UNCORRECTABLE_ERRORS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_CXL_INJECT_UNCORRECTABLE_ERRORS) || \
    false)

static inline void _nocheck__trace_qmp_exit_cxl_inject_uncorrectable_errors(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_CXL_INJECT_UNCORRECTABLE_ERRORS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "qapi/qapi-commands-cxl.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_cxl_inject_uncorrectable_errors " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 343 "trace/trace-qapi_commands_cxl_trace_events.h"
        } else {
#line 12 "qapi/qapi-commands-cxl.trace-events"
            qemu_log("qmp_exit_cxl_inject_uncorrectable_errors " "%s %d" "\n", result, succeeded);
#line 347 "trace/trace-qapi_commands_cxl_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_cxl_inject_uncorrectable_errors(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_cxl_inject_uncorrectable_errors(result, succeeded);
    }
}

#define TRACE_QMP_ENTER_CXL_INJECT_CORRECTABLE_ERROR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_ENTER_CXL_INJECT_CORRECTABLE_ERROR) || \
    false)

static inline void _nocheck__trace_qmp_enter_cxl_inject_correctable_error(const char * json)
{
    if (trace_event_get_state(TRACE_QMP_ENTER_CXL_INJECT_CORRECTABLE_ERROR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "qapi/qapi-commands-cxl.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_enter_cxl_inject_correctable_error " "%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , json);
#line 374 "trace/trace-qapi_commands_cxl_trace_events.h"
        } else {
#line 13 "qapi/qapi-commands-cxl.trace-events"
            qemu_log("qmp_enter_cxl_inject_correctable_error " "%s" "\n", json);
#line 378 "trace/trace-qapi_commands_cxl_trace_events.h"
        }
    }
}

static inline void trace_qmp_enter_cxl_inject_correctable_error(const char * json)
{
    if (true) {
        _nocheck__trace_qmp_enter_cxl_inject_correctable_error(json);
    }
}

#define TRACE_QMP_EXIT_CXL_INJECT_CORRECTABLE_ERROR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QMP_EXIT_CXL_INJECT_CORRECTABLE_ERROR) || \
    false)

static inline void _nocheck__trace_qmp_exit_cxl_inject_correctable_error(const char * result, bool succeeded)
{
    if (trace_event_get_state(TRACE_QMP_EXIT_CXL_INJECT_CORRECTABLE_ERROR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 14 "qapi/qapi-commands-cxl.trace-events"
            qemu_log("%d@%zu.%06zu:qmp_exit_cxl_inject_correctable_error " "%s %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , result, succeeded);
#line 405 "trace/trace-qapi_commands_cxl_trace_events.h"
        } else {
#line 14 "qapi/qapi-commands-cxl.trace-events"
            qemu_log("qmp_exit_cxl_inject_correctable_error " "%s %d" "\n", result, succeeded);
#line 409 "trace/trace-qapi_commands_cxl_trace_events.h"
        }
    }
}

static inline void trace_qmp_exit_cxl_inject_correctable_error(const char * result, bool succeeded)
{
    if (true) {
        _nocheck__trace_qmp_exit_cxl_inject_correctable_error(result, succeeded);
    }
}
#endif /* TRACE_QAPI_COMMANDS_CXL_TRACE_EVENTS_GENERATED_TRACERS_H */
